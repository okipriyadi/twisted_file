"""
Sockets can be configured to act as a server and listen for incoming messages, or con-
nect to other applications as a client. After both ends of a TCP/IP socket are connected,
communication is bidirectional.
Echo Server
This sample program, based on the one in the standard library documentation, receives
incoming messages and echos them back to the sender. It starts by creating a TCP/IP
socket.
"""
import socket
import sys

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# Bind the socket to the port
"""
Then bind() is used to associate the socket with the server address. In this case,
the address is localhost , referring to the current server, and the port number is 10000.
"""
server_address = ('localhost', 10000)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sock.bind(server_address)

"""
Calling listen() puts the socket into server mode, and accept() waits for an
incoming connection. The integer argument is the number of connections the system
should queue up in the background before rejecting new clients. This example only
expects to work with one connection at a time.
"""
# Listen for incoming connections
sock.listen(1)
while True:
    # Wait for a connection
    print >>sys.stderr, 'waiting for a connection'
    connection, client_address = sock.accept()